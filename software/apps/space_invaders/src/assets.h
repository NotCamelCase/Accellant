#pragma once

#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

#include "sprite.h"

static const unsigned char hero_png[] = {
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x1e,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x70, 0x98, 0x7d, 0x4f, 0x00, 0x00, 0x00,
    0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x00, 0x0b,
    0x12, 0x01, 0xd2, 0xdd, 0x7e, 0xfc, 0x00, 0x00, 0x00, 0x70, 0x49, 0x44,
    0x41, 0x54, 0x58, 0x85, 0xed, 0xd8, 0xc1, 0x0d, 0x80, 0x20, 0x10, 0x44,
    0xd1, 0xc5, 0x78, 0xb7, 0x04, 0x5b, 0x91, 0xca, 0x6d, 0x05, 0x3a, 0xd0,
    0x0a, 0xd6, 0x0a, 0x38, 0x70, 0x20, 0x31, 0x33, 0xff, 0x55, 0xc0, 0x4f,
    0x36, 0x0b, 0xa1, 0x64, 0x66, 0x38, 0xd9, 0xac, 0x6a, 0x09, 0x36, 0x40,
    0xb0, 0xba, 0x7d, 0x75, 0x5f, 0xed, 0xef, 0xd4, 0x35, 0x70, 0x9f, 0x47,
    0x59, 0x77, 0x1a, 0x46, 0x5a, 0x1f, 0xc1, 0xea, 0xec, 0x82, 0x87, 0x6f,
    0xe9, 0xd9, 0xed, 0xfa, 0x37, 0xa3, 0x6d, 0xcf, 0x48, 0xab, 0x23, 0x58,
    0x9d, 0xdf, 0x96, 0xbe, 0xda, 0x63, 0xf5, 0xe5, 0xc1, 0x48, 0xab, 0x23,
    0x58, 0x1d, 0xc1, 0xea, 0x08, 0x56, 0x47, 0xb0, 0x3a, 0xaf, 0xe0, 0x88,
    0xf8, 0x00, 0x65, 0xb0, 0x11, 0x45, 0xe1, 0xdc, 0xc8, 0x30, 0x00, 0x00,
    0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char yellow_png[] = {
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x20,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x60, 0xad, 0x3a, 0x00, 0x00, 0x00, 0x00,
    0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x00, 0x0b,
    0x12, 0x01, 0xd2, 0xdd, 0x7e, 0xfc, 0x00, 0x00, 0x00, 0x8e, 0x49, 0x44,
    0x41, 0x54, 0x58, 0x85, 0xed, 0x97, 0xc1, 0x0d, 0x80, 0x20, 0x0c, 0x45,
    0x8b, 0x71, 0x1f, 0x47, 0x70, 0x05, 0x9d, 0xd4, 0x15, 0x74, 0x03, 0x9d,
    0x08, 0xcf, 0xf6, 0x00, 0x69, 0x3e, 0x35, 0x85, 0xfc, 0x77, 0xa6, 0xd0,
    0xe4, 0xbf, 0x34, 0x25, 0xe5, 0x9c, 0xa5, 0xc4, 0x73, 0xed, 0x9f, 0x03,
    0xcb, 0x7a, 0xa4, 0x62, 0x41, 0x05, 0xeb, 0x7d, 0x13, 0xf2, 0xd8, 0x1f,
    0xb0, 0x41, 0x94, 0xaa, 0x83, 0x1a, 0xab, 0x43, 0xa8, 0xc3, 0x8c, 0x18,
    0xa5, 0x7f, 0x07, 0xb5, 0x43, 0xad, 0xe1, 0x1c, 0xf4, 0xa6, 0x3f, 0x07,
    0x6b, 0xce, 0x69, 0x67, 0xbc, 0xcf, 0x33, 0x62, 0x94, 0xf8, 0x0e, 0xde,
    0xe7, 0xe6, 0x3a, 0xe7, 0x50, 0x18, 0x31, 0xca, 0x78, 0x73, 0xd0, 0x1b,
    0xce, 0xc1, 0xd6, 0x8c, 0xbf, 0x0f, 0x5a, 0xff, 0x24, 0xd6, 0x7a, 0x46,
    0x8c, 0x12, 0xbe, 0xc1, 0xd9, 0x5a, 0x60, 0xfd, 0xd7, 0x5a, 0xf7, 0x47,
    0x0d, 0x23, 0x46, 0x89, 0xdd, 0xa0, 0x88, 0xbc, 0x3a, 0x2c, 0x46, 0x27,
    0xa7, 0xc9, 0x3a, 0x7d, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44,
    0xae, 0x42, 0x60, 0x82
};

static const unsigned char green_png[] = {
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x20,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x60, 0xad, 0x3a, 0x00, 0x00, 0x00, 0x00,
    0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x00, 0x0b,
    0x12, 0x01, 0xd2, 0xdd, 0x7e, 0xfc, 0x00, 0x00, 0x00, 0x8e, 0x49, 0x44,
    0x41, 0x54, 0x58, 0x85, 0xed, 0x97, 0xc1, 0x0d, 0x80, 0x20, 0x10, 0x04,
    0x0f, 0x63, 0x3f, 0xb6, 0xa2, 0x9d, 0x60, 0x25, 0x96, 0x62, 0x2b, 0x5a,
    0x11, 0xfe, 0xef, 0x73, 0xd9, 0x2c, 0x18, 0x20, 0x3b, 0xef, 0x23, 0x5c,
    0xb2, 0x93, 0x0d, 0xa4, 0x52, 0x8a, 0x21, 0x1c, 0xef, 0x89, 0x1d, 0x70,
    0xdc, 0xdb, 0x95, 0x90, 0xf9, 0x85, 0xb9, 0xec, 0x0f, 0xb4, 0x20, 0x4b,
    0xe8, 0x20, 0xeb, 0x5c, 0x44, 0xe4, 0xa4, 0x22, 0x66, 0x19, 0xcf, 0xc1,
    0xc8, 0x39, 0xef, 0x4c, 0xeb, 0x79, 0x45, 0xcc, 0xd2, 0xbf, 0x83, 0xfb,
    0x93, 0x9b, 0xf6, 0x1c, 0x8b, 0x22, 0x66, 0x99, 0xaf, 0x07, 0x5b, 0xa3,
    0x1e, 0xac, 0xcd, 0xf8, 0xef, 0x41, 0x8f, 0x77, 0x34, 0x7a, 0xcf, 0xa1,
    0xf3, 0x1e, 0x45, 0xcc, 0xd2, 0xfd, 0x82, 0x6b, 0x34, 0x50, 0xbb, 0x17,
    0x51, 0x27, 0x15, 0x31, 0xcb, 0x7c, 0x3d, 0xe8, 0x41, 0xff, 0x18, 0x28,
    0x8a, 0x98, 0xa5, 0xef, 0x05, 0xcd, 0xec, 0x03, 0x89, 0x13, 0x3f, 0x4b,
    0xc5, 0x0d, 0x8f, 0x64, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44,
    0xae, 0x42, 0x60, 0x82
};

static const unsigned char red_png[] = {
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x20,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x60, 0xad, 0x3a, 0x00, 0x00, 0x00, 0x00,
    0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x00, 0x0b,
    0x12, 0x01, 0xd2, 0xdd, 0x7e, 0xfc, 0x00, 0x00, 0x00, 0x88, 0x49, 0x44,
    0x41, 0x54, 0x58, 0x85, 0xed, 0x97, 0x41, 0x0a, 0x80, 0x30, 0x0c, 0x04,
    0x53, 0xf1, 0xec, 0xd7, 0xd4, 0x97, 0xea, 0xd7, 0xf4, 0x03, 0xf5, 0x1e,
    0xa1, 0x61, 0xd9, 0x16, 0x52, 0xd8, 0xb9, 0x16, 0xd2, 0xc0, 0x0e, 0x5b,
    0x5a, 0x6a, 0xad, 0x96, 0x99, 0x25, 0xf5, 0x76, 0x5a, 0xb0, 0x03, 0x6b,
    0x34, 0xe2, 0x3d, 0xce, 0xa1, 0x92, 0x6e, 0xf7, 0x55, 0x5a, 0xe7, 0x72,
    0x90, 0x25, 0xfd, 0x82, 0xbf, 0x1e, 0x1c, 0xed, 0x5c, 0x84, 0x77, 0x52,
    0x11, 0xb3, 0xe4, 0x77, 0xf0, 0xd9, 0x8f, 0xa6, 0x73, 0xde, 0x09, 0xd6,
    0x51, 0x74, 0x9e, 0x22, 0x66, 0x99, 0xdf, 0x41, 0x0f, 0xea, 0x10, 0xeb,
    0xb0, 0x22, 0x66, 0xd1, 0x5b, 0x8c, 0xa2, 0xb7, 0xb8, 0x37, 0xf3, 0xf5,
    0x60, 0xf4, 0x47, 0xf0, 0xa0, 0x3d, 0x88, 0xce, 0x53, 0xc4, 0x2c, 0xf3,
    0xf7, 0x20, 0xea, 0x10, 0x4a, 0x74, 0x9f, 0x22, 0x66, 0xc9, 0xbd, 0xa0,
    0x99, 0x7d, 0x6d, 0x22, 0x3f, 0xdd, 0x2d, 0x6c, 0x58, 0x0a, 0x00, 0x00,
    0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char extra_png[] = {
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x14,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xff, 0x46, 0x7f, 0xbb, 0x00, 0x00, 0x00,
    0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x00, 0x0b,
    0x12, 0x01, 0xd2, 0xdd, 0x7e, 0xfc, 0x00, 0x00, 0x00, 0x6b, 0x49, 0x44,
    0x41, 0x54, 0x48, 0x89, 0x63, 0xfc, 0xff, 0xff, 0x3f, 0x03, 0x3e, 0xa0,
    0x7e, 0xe5, 0x03, 0x7e, 0x05, 0x14, 0x82, 0x9b, 0x3a, 0x02, 0x8c, 0xf8,
    0x4c, 0x60, 0xa2, 0xa5, 0xe5, 0xd4, 0x00, 0xa3, 0x0e, 0xa4, 0x14, 0x60,
    0xa4, 0x41, 0x5a, 0xa7, 0x39, 0x42, 0x00, 0x3d, 0x4d, 0x8e, 0x46, 0x31,
    0xa5, 0x60, 0xf0, 0xa7, 0x41, 0xb5, 0xcb, 0xef, 0x07, 0x34, 0xcd, 0x11,
    0x02, 0xa3, 0x51, 0x4c, 0x29, 0x18, 0x7a, 0xe5, 0x20, 0x3a, 0x18, 0xad,
    0x8b, 0x09, 0x80, 0x51, 0x07, 0x52, 0x0a, 0x08, 0xa6, 0x41, 0x74, 0x80,
    0x9e, 0x26, 0x09, 0xa5, 0x21, 0x52, 0xd5, 0xa3, 0x83, 0xd1, 0x28, 0xa6,
    0x14, 0x0c, 0x6e, 0x07, 0x32, 0x30, 0x30, 0x00, 0x00, 0x98, 0xf5, 0x22,
    0xff, 0x35, 0xda, 0xfe, 0x17, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e,
    0x44, 0xae, 0x42, 0x60, 0x82
};

// Load embedded image resources to create a mapping of resource -> sprite
bool InitAssets(Sprite *pSprites)
{
    auto lbdLoadPngImage = [](const uint8_t *const pResource, uint32_t dataLength, Sprite *pSprite) -> bool
    {
        // Load in the image resource from memory
        int x, y, comp;
        uint8_t *pResBuffer = stbi_load_from_memory(pResource, dataLength, &x, &y, &comp, 0);
        if (!pResBuffer)
        {
            printf("ERROR: Parsing image!\n");
            return false;
        }

        // PNG image loaded; convert RGBA-formatted data to RGB triplets to get rid of alpha-channel to save 25% memory bandwidth
        pSprite->m_pImage = new uint8_t[x * y * 3];
        pSprite->m_Width = x;
        pSprite->m_Height = y;

#define CONSUME_ALPHA(c, a) ((a == 0) ? 0 : c)

        for (int j = 0; j < y; j++)
        {
            for (int i = 0; i < x; i++)
            {
                const uint8_t a = pResBuffer[4 * (i + j * x) + 3];

                // Assume alpha 0 is black, no transparency
                uint8_t r = CONSUME_ALPHA(pResBuffer[4 * (i + j * x) + 0], a);
                uint8_t g = CONSUME_ALPHA(pResBuffer[4 * (i + j * x) + 1], a);
                uint8_t b = CONSUME_ALPHA(pResBuffer[4 * (i + j * x) + 2], a);

                pSprite->m_pImage[3 * (i + j * x) + 0] = r;
                pSprite->m_pImage[3 * (i + j * x) + 1] = g;
                pSprite->m_pImage[3 * (i + j * x) + 2] = b;
            }
        }

        // We're done with the PNG image, free it
        stbi_image_free(pResBuffer);

        return true;
    };

    // Hero sprite
    if (!lbdLoadPngImage(hero_png, ARRAY_SIZE(hero_png), &pSprites[SPRITE_TYPE_HERO]))
    {
        return false;
    }

    // Green enemy sprite
    if (!lbdLoadPngImage(green_png, ARRAY_SIZE(green_png), &pSprites[SPRITE_TYPE_GREEN]))
    {
        return false;
    }

    // Yellow enemy sprite
    if (!lbdLoadPngImage(yellow_png, ARRAY_SIZE(yellow_png), &pSprites[SPRITE_TYPE_YELLOW]))
    {
        return false;
    }

    // Red enemy sprite
    if (!lbdLoadPngImage(red_png, ARRAY_SIZE(red_png), &pSprites[SPRITE_TYPE_RED]))
    {
        return false;
    }

    // UFO sprite
    if (!lbdLoadPngImage(extra_png, ARRAY_SIZE(extra_png), &pSprites[SPRITE_TYPE_UFO]))
    {
        return false;
    }

    return true;
}